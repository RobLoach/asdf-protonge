#! /usr/bin/env bash

set -eu -o pipefail

fetch() {
	local url="$1" download_path="$2"
	local extra_args=()

	if [ "${GITHUB_API_TOKEN:-}" ]; then
		extra_args+=(--header "Authorization: token $GITHUB_API_TOKEN")
	fi

	if type aria2c &> /dev/null; then
		aria2c -x4 -c "${extra_args[@]}" "$url" -d "$(dirname "$download_path")" -o "$(basename "$download_path")"
	else
		curl -fL -C - "${extra_args[@]}" "$url" -o "$download_path"
	fi
}

get_tar_url() {
	local tag="$1"
	local extra_args=()

	if [ "${GITHUB_API_TOKEN:-}" ]; then
		extra_args+=(--header "Authorization: token $GITHUB_API_TOKEN")
	fi

	curl -fL "${extra_args[@]}" https://api.github.com/repos/GloriousEggroll/proton-ge-custom/releases/tags/"$tag" \
		| grep -Eo 'browser_download_url":"[^"]*' \
		| grep tar.gz \
		| grep -o "https://.*$"
}

download_pre_compiled() {
	local tag="$1" download_path="$2" tar_url=
	tar_url=$(get_tar_url "$tag")


	fetch "$tar_url" "$download_path"
}

download() {
	local download_type= version= download_path=

	download_type="$1"
	version="$2"
	download_path="$(cd "$3" && pwd -P)"

	local tarball_path=
	tarball_path="$download_path/tarball.tar.gz"

	if [ "$download_type" = version ]; then
		download_pre_compiled "$version" "$tarball_path"
	else
		printf "Building from source not supported\n"
		exit 1
	fi
}

download "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_DOWNLOAD_PATH"
